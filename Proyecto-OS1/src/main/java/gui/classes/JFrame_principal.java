/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.classes;

import helpers.CustomQueue;
import tipografias.Fuentes;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import javax.swing.SwingUtilities;
import main.classes.PCB;
import main.classes.Simulator;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import java.awt.BorderLayout; // Para añadir JScrollPane a los JPanels
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import main.classes.CPU;

/**
 *
 * @author fabys
 */
public class JFrame_principal extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(JFrame_principal.class.getName());

    /**
     * Creates new form JFrame_principal
     */
    Fuentes tipoFuente;
    private Simulator simulator;

    // --- MODELOS Y LISTAS PARA CADA COLA VISUAL ---
    // Modelos: 
    private DefaultListModel<PCB> readyListModel;
    private DefaultListModel<PCB> blockedListModel;
    private DefaultListModel<PCB> finishedListModel;
    private DefaultListModel<PCB> readySuspendedListModel;
    private DefaultListModel<PCB> blockedSuspendedListModel;

    // JLists: Muestran los datos de los modelos (los "marcos en el tablón")
    private JList<PCB> readyQueueList;
    private JList<PCB> blockedQueueList;
    private JList<PCB> finishedQueueList;
    private JList<PCB> readySuspendedQueueList;
    private JList<PCB> blockedSuspendedQueueList;

    public JFrame_principal(Simulator simulator) {
        this.simulator = simulator;

        initComponents();
        tipoFuente = new Fuentes();
        Font currentFont = cycleLabel.getFont();
        Font newFont = currentFont.deriveFont(Font.BOLD, 24f);
        cycleLabel.setFont(newFont);
        // --- INICIALIZACIÓN DE COMPONENTES VISUALES PARA LAS COLAS ---
        initializeQueueLists();
        jLabel1.setFont(tipoFuente.fuente(tipoFuente.Inter, 0, 22));
        setSize(1530, 800);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        setLocationRelativeTo(null);
        CicloExcepcion.setVisible(false);
        CicloSatisfacer.setVisible(false);
        TextCicloExcepcion.setVisible(false);
        TextCicloSatisfacer.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        DuracionCiclo = new javax.swing.JTextField();
        GuardarConfig = new javax.swing.JButton();
        CargarConfig = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nombreProceso = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Instructions = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ComboBox = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        CicloExcepcion = new javax.swing.JLabel();
        TextCicloExcepcion = new javax.swing.JTextField();
        CicloSatisfacer = new javax.swing.JLabel();
        TextCicloSatisfacer = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cpuInfoPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cpuPcLabel = new javax.swing.JLabel();
        cpuProcessStateLabel = new javax.swing.JLabel();
        cpuProcessNameLabel = new javax.swing.JLabel();
        cpuProcessIdLabel = new javax.swing.JLabel();
        cpuMarLabel = new javax.swing.JLabel();
        cpuModeLabel = new javax.swing.JLabel();
        cycleLabel = new javax.swing.JLabel();
        randomProcessButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Proyecto 1 : Simulador de Planificacion de Procesos");

        jLabel2.setText("Interfaz de visualizacion para sistemas monoprocesador");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        jLabel3.setText("Configuración");

        jButton1.setBackground(new java.awt.Color(51, 255, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Duracion del Ciclo (ms):");

        DuracionCiclo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuracionCicloActionPerformed(evt);
            }
        });

        GuardarConfig.setBackground(new java.awt.Color(17, 68, 68));
        GuardarConfig.setForeground(new java.awt.Color(255, 255, 255));
        GuardarConfig.setText("Guardar Config");
        GuardarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarConfigActionPerformed(evt);
            }
        });

        CargarConfig.setBackground(new java.awt.Color(182, 203, 203));
        CargarConfig.setText("Cargar Config");
        CargarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarConfigActionPerformed(evt);
            }
        });

        jLabel9.setText("Algoritmos de Planificacion:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SJF (Shortest Job First)", "Round Robin", "FIFO (First In, Firts Out)", "SRTF (Short Remaining Time First)", "Multilevel Queue", "Multilevel Feedback Queue" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(GuardarConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(CargarConfig)
                .addGap(68, 68, 68))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DuracionCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DuracionCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GuardarConfig)
                    .addComponent(CargarConfig))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        jLabel5.setText("Crear Nuevo Proceso");

        nombreProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreProcesoActionPerformed(evt);
            }
        });

        jLabel6.setText("Nombre del Proceso:");

        jLabel7.setText("Numero de Instrucciones:");

        jLabel8.setText("Tipo de Proceso:");

        ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU Bound", "I/O Bound" }));
        ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxItemStateChanged(evt);
            }
        });
        ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 0, 255));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Añadir Proceso");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        CicloExcepcion.setText("Ciclos para excepcion:");

        CicloSatisfacer.setText("Ciclos para satisfacer:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(CicloExcepcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nombreProceso)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(CicloSatisfacer, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(TextCicloExcepcion)
                            .addComponent(TextCicloSatisfacer)
                            .addComponent(Instructions)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(9, 9, 9)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Instructions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CicloExcepcion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextCicloExcepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CicloSatisfacer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextCicloSatisfacer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel11.setText("Listos/Suspendidos");

        jLabel12.setText("Bloqueados/Suspendidos");

        cpuInfoPanel.setBackground(new java.awt.Color(153, 255, 153));

        jLabel14.setText("CPU");

        jLabel15.setText("ID del Proceso:");

        jLabel16.setText("Nombre del Proceso:");

        jLabel17.setText("Program Counter (PC):");

        jLabel18.setText("Memory Address Register (MAR):");

        jLabel19.setText("Modo de la CPU:");

        jLabel20.setText("Estado del Proceso:");

        cpuPcLabel.setText("...");

        cpuProcessStateLabel.setText("...");

        cpuProcessNameLabel.setText("...");

        cpuProcessIdLabel.setText("...");

        cpuMarLabel.setText("...");

        cpuModeLabel.setText("...");

        javax.swing.GroupLayout cpuInfoPanelLayout = new javax.swing.GroupLayout(cpuInfoPanel);
        cpuInfoPanel.setLayout(cpuInfoPanelLayout);
        cpuInfoPanelLayout.setHorizontalGroup(
            cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpuProcessIdLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                        .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpuModeLabel))
                            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpuProcessNameLabel))
                            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpuMarLabel))
                            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpuPcLabel))
                            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpuProcessStateLabel))
                            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(jLabel14)))
                        .addContainerGap(67, Short.MAX_VALUE))))
        );
        cpuInfoPanelLayout.setVerticalGroup(
            cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpuInfoPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(cpuProcessIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(cpuProcessStateLabel))
                .addGap(12, 12, 12)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cpuProcessNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cpuPcLabel))
                .addGap(18, 18, 18)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(cpuMarLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cpuInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(cpuModeLabel))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        cycleLabel.setText("Ciclo de reloj Global");

        randomProcessButton.setText("Crear 20 procesos aleatorios");
        randomProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomProcessButtonActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        jLabel21.setText("Cola De Procesos Terminados");

        jLabel22.setText("Capacidad Total de la Memoria Principal: ");

        jLabel23.setText("Uso Actual de MP: ");

        jLabel10.setText("Cola de Listos (Ready Queue)");

        jLabel13.setText("Colas de Bloqueados (Blocked)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(randomProcessButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cycleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cpuInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel13)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel23)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cpuInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cycleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(randomProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String durationText = DuracionCiclo.getText();
            int durationMs = Integer.parseInt(durationText);

            if (durationMs <= 0) {
                JOptionPane.showMessageDialog(this, "La duración del ciclo debe ser un número positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            this.simulator.setCycleDuration(durationMs);

            Thread simulatorThread = new Thread(this.simulator);
            simulatorThread.start();

            jButton1.setEnabled(false);
            CargarConfig.setEnabled(false);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce un número válido para la duración del ciclo.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nombreProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreProcesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreProcesoActionPerformed

    private void ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String processName = nombreProceso.getText();
        String instructionsText = Instructions.getText();
        String processType = (String) ComboBox.getSelectedItem();

        if (processName.isEmpty() || instructionsText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre y el número de instrucciones no pueden estar vacíos.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int totalInstructions;
        try {
            totalInstructions = Integer.parseInt(instructionsText);
            if (totalInstructions <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce un número de instrucciones válido y positivo.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int cyclesForException = 0;
        int satisfyCycles = 0;

        // Si es I/O-Bound
        if ("I/O Bound".equals(processType)) {
            try {
                cyclesForException = Integer.parseInt(TextCicloExcepcion.getText());
                satisfyCycles = Integer.parseInt(TextCicloSatisfacer.getText());
                if (cyclesForException <= 0 || satisfyCycles <= 0) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, introduce números válidos y positivos para los ciclos de E/S.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        this.simulator.createProcessFromUI(processName, totalInstructions, processType, cyclesForException, satisfyCycles);
        nombreProceso.setText("");
        Instructions.setText("");
        TextCicloExcepcion.setText("");
        TextCicloSatisfacer.setText("");

        JOptionPane.showMessageDialog(this, "Proceso '" + processName + "' añadido al sistema.", "Proceso Creado", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void GuardarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarConfigActionPerformed
        String duracionCiclo = DuracionCiclo.getText();
        String nombreArchivo = "configuracion.csv";

        if (duracionCiclo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor para la Duración del Ciclo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (PrintWriter pw = new PrintWriter(new FileWriter(nombreArchivo))) {
            pw.println(duracionCiclo);

            JOptionPane.showMessageDialog(this, "Configuración guardada exitosamente en " + nombreArchivo, "Guardado", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar la configuración: " + e.getMessage(), "Error de E/S", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_GuardarConfigActionPerformed

    private void CargarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarConfigActionPerformed
        String nombreArchivo = "configuracion.csv";

        try (BufferedReader br = new BufferedReader(new FileReader(nombreArchivo))) {
            String duracionCicloLeida = br.readLine();

            if (duracionCicloLeida != null) {
                DuracionCiclo.setText(duracionCicloLeida.trim());
                JOptionPane.showMessageDialog(this, "Configuración cargada exitosamente desde " + nombreArchivo, "Cargado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo de configuración está vacío.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }

        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Archivo de configuración no encontrado: " + nombreArchivo, "Error de Archivo", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer la configuración: " + e.getMessage(), "Error de E/S", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_CargarConfigActionPerformed

    private void DuracionCicloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuracionCicloActionPerformed

    }//GEN-LAST:event_DuracionCicloActionPerformed
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedPolicyFullName = (String) jComboBox2.getSelectedItem();

        String policyCode;
        switch (selectedPolicyFullName) {
            case "SJF (Shortest Job First)":
                policyCode = "SJF";
                break;
            case "Round Robin":
                policyCode = "RR";
                break;
            case "FIFO (First In, Firts Out)":
                policyCode = "FCFS";
                break;
            case "SRTF (Short Remaining Time First)":
                policyCode = "SRT";
                break;
            case "Multilevel Queue":
                policyCode = "MLQ";
                break;
            case "Multilevel Feedback Queue":
                policyCode = "MLFQ";
                break;
            default:
                policyCode = "FCFS"; // Política por defecto si algo falla
        }

        if (this.simulator != null) {
            this.simulator.setPlanningPolicy(policyCode);
            System.out.println("GUI: Política de planificación -> " + policyCode);
        }
    }
    private void ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxItemStateChanged
        String tipoSeleccionado = (String) ComboBox.getSelectedItem();

        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {

            boolean esIOBound = "I/O Bound".equals(tipoSeleccionado);

            CicloExcepcion.setVisible(esIOBound);

            TextCicloExcepcion.setVisible(esIOBound);

            CicloSatisfacer.setVisible(esIOBound);

            TextCicloSatisfacer.setVisible(esIOBound);

            this.revalidate();
            this.repaint();
        }
    }//GEN-LAST:event_ComboBoxItemStateChanged

    private void randomProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomProcessButtonActionPerformed
        if (this.simulator != null) {
            // Llama al nuevo método del simulador para crear 20 procesos
            this.simulator.createRandomProcesses(20);
            JOptionPane.showMessageDialog(this, "Se han añadido 20 procesos aleatorios al sistema.", "Procesos Creados", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_randomProcessButtonActionPerformed
    /**
     * Actualiza la JList de la Ready Queue. Debe ser llamado desde el
     * Simulator.
     *
     * @param readyQueue La cola de listos actual del simulador.
     */
    public void updateReadyQueue(CustomQueue<PCB> readyQueue) {
        SwingUtilities.invokeLater(() -> {
            readyListModel.clear();
            for (PCB pcb : readyQueue.iterable()) {
                readyListModel.addElement(pcb);
            }
        });
    }

    /**
     * Actualiza la JList de la Blocked Queue.
     */
    public void updateReadySuspendedQueue(CustomQueue<PCB> readySuspendedQueue) {

        SwingUtilities.invokeLater(() -> {
            readySuspendedListModel.clear();
            for (PCB pcb : readySuspendedQueue.iterable()) {
                readySuspendedListModel.addElement(pcb);
            }
        });
    }

    /**
     * Actualiza la JList de la Blocked Queue.
     */
    public void updateBlockedQueue(CustomQueue<PCB> blockedQueue) {

        SwingUtilities.invokeLater(() -> {
            blockedListModel.clear();
            for (PCB pcb : blockedQueue.iterable()) {
                blockedListModel.addElement(pcb);
            }
        });
    }

    /**
     * Actualiza la JList de la Finished Queue.
     */
    public void updateFinishedQueue(CustomQueue<PCB> finishedQueue) {
        SwingUtilities.invokeLater(() -> {
            finishedListModel.clear();
            for (PCB pcb : finishedQueue.iterable()) {
                finishedListModel.addElement(pcb);
            }
        });
    }

    public void updateBlockedSuspendedQueue(CustomQueue<PCB> BlockedSuspendedQueue) {
        SwingUtilities.invokeLater(() -> {
            blockedSuspendedListModel.clear();
            for (PCB pcb : BlockedSuspendedQueue.iterable()) {
                blockedSuspendedListModel.addElement(pcb);
            }
        });
    }

    public void updateCpuPanel(PCB runningPcb, CPU.Mode currentMode) {
        SwingUtilities.invokeLater(() -> {
            cpuModeLabel.setText(currentMode.toString()); // Muestra "KERNEL" o "USER"

            if (runningPcb != null) {
                cpuProcessIdLabel.setText(runningPcb.getProcessID_short());
                cpuProcessNameLabel.setText(runningPcb.getProcessName());
                cpuProcessStateLabel.setText(runningPcb.getState().toString());
                cpuPcLabel.setText(String.valueOf(runningPcb.getProgramCounter()));
                cpuMarLabel.setText(String.valueOf(runningPcb.getMemoryAddressRegister()));
                cpuMarLabel.setText("---");
                cpuInfoPanel.setBackground(new Color(230, 255, 230)); // Verde claro

            } else {
                cpuProcessIdLabel.setText("---");
                cpuProcessNameLabel.setText("Idle");
                cpuProcessStateLabel.setText("---");
                cpuPcLabel.setText("---");
                cpuMarLabel.setText("---");
                cpuInfoPanel.setBackground(new Color(230, 230, 255)); // Azul claro
            }
        });
    }

    public void updateGlobalCycleLabel(int currentCycle) {
        SwingUtilities.invokeLater(() -> {
            cycleLabel.setText("Ciclo Global: " + currentCycle);
        });
    }

            
    public void updateMemoryUsage(int use, int total) {
        SwingUtilities.invokeLater(() -> {
            jLabel23.setText("Memoria en uso: " + use);
            jLabel22.setText("Capacidad de Memoria Pricipal: " + total);
        });
    }         
            
    private void initializeQueueLists() {

        // Renderizador personalizado
        ChartManager renderer = new ChartManager();

        // Define el tamaño fijo deseado para tus paneles de cola
        Dimension fixedQueueSize = new Dimension(250, 200);

        // --- 1. Ready Queue (jPanel3) ---
        readyListModel = new DefaultListModel<>();
        readyQueueList = new JList<>(readyListModel);
        readyQueueList.setCellRenderer(renderer);

        JScrollPane readyScrollPane = new JScrollPane(readyQueueList);
        // Establece el tamaño preferido, mínimo y máximo al mismo valor para fijarlo
        readyScrollPane.setPreferredSize(fixedQueueSize);
        readyScrollPane.setMinimumSize(fixedQueueSize);
        readyScrollPane.setMaximumSize(fixedQueueSize);
        readyScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        readyScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel3.setLayout(new BorderLayout());
        jPanel3.add(readyScrollPane, BorderLayout.CENTER);

        // --- 2. Blocked Queue (jPanel5) ---
        blockedListModel = new DefaultListModel<>();
        blockedQueueList = new JList<>(blockedListModel);
        blockedQueueList.setCellRenderer(renderer);

        JScrollPane blockedScrollPane = new JScrollPane(blockedQueueList);
        // Aplica el mismo tamaño fijo
        blockedScrollPane.setPreferredSize(fixedQueueSize);
        blockedScrollPane.setMinimumSize(fixedQueueSize);
        blockedScrollPane.setMaximumSize(fixedQueueSize);
        blockedScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        blockedScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel5.setLayout(new BorderLayout());
        jPanel5.add(blockedScrollPane, BorderLayout.CENTER);

        // --- 3. Ready/Suspended (jPanel4) ---
        readySuspendedListModel = new DefaultListModel<>();
        readySuspendedQueueList = new JList<>(readySuspendedListModel);
        readySuspendedQueueList.setCellRenderer(renderer);

        JScrollPane readySuspendedScrollPane = new JScrollPane(readySuspendedQueueList);
        // ¡CORRECCIÓN! Aplica el tamaño al JScrollPane correcto
        readySuspendedScrollPane.setPreferredSize(fixedQueueSize);
        readySuspendedScrollPane.setMinimumSize(fixedQueueSize);
        readySuspendedScrollPane.setMaximumSize(fixedQueueSize);
        readySuspendedScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        readySuspendedScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel4.setLayout(new BorderLayout());
        jPanel4.add(readySuspendedScrollPane, BorderLayout.CENTER);

        // --- 4. Blocked/Suspended (jPanel6) ---
        blockedSuspendedListModel = new DefaultListModel<>();
        blockedSuspendedQueueList = new JList<>(blockedSuspendedListModel);
        blockedSuspendedQueueList.setCellRenderer(renderer);

        JScrollPane blockedSuspendedScrollPane = new JScrollPane(blockedSuspendedQueueList);
        // ¡CORRECCIÓN! Aplica el tamaño al JScrollPane correcto
        blockedSuspendedScrollPane.setPreferredSize(fixedQueueSize);
        blockedSuspendedScrollPane.setMinimumSize(fixedQueueSize);
        blockedSuspendedScrollPane.setMaximumSize(fixedQueueSize);
        blockedSuspendedScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        blockedSuspendedScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel6.setLayout(new BorderLayout());
        jPanel6.add(blockedSuspendedScrollPane, BorderLayout.CENTER);

        // finished
        finishedListModel = new DefaultListModel<>();
        finishedQueueList = new JList<>(finishedListModel);
        finishedQueueList.setCellRenderer(renderer);
        JScrollPane finishedScrollPane = new JScrollPane(finishedQueueList);
        finishedScrollPane.setPreferredSize(fixedQueueSize);
        finishedScrollPane.setMinimumSize(fixedQueueSize);
        finishedScrollPane.setMaximumSize(fixedQueueSize);
        finishedScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        finishedScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jPanel7.setLayout(new BorderLayout());
        jPanel7.add(finishedScrollPane, BorderLayout.CENTER);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        Simulator mainSimulator = new Simulator();

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new JFrame_principal(mainSimulator).setVisible(true);
            JFrame_principal mainFrame = new JFrame_principal(mainSimulator);
            mainSimulator.setGui(mainFrame);
            mainFrame.setVisible(true);

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarConfig;
    private javax.swing.JLabel CicloExcepcion;
    private javax.swing.JLabel CicloSatisfacer;
    private javax.swing.JComboBox<String> ComboBox;
    private javax.swing.JTextField DuracionCiclo;
    private javax.swing.JButton GuardarConfig;
    private javax.swing.JTextField Instructions;
    private javax.swing.JTextField TextCicloExcepcion;
    private javax.swing.JTextField TextCicloSatisfacer;
    private javax.swing.JPanel cpuInfoPanel;
    private javax.swing.JLabel cpuMarLabel;
    private javax.swing.JLabel cpuModeLabel;
    private javax.swing.JLabel cpuPcLabel;
    private javax.swing.JLabel cpuProcessIdLabel;
    private javax.swing.JLabel cpuProcessNameLabel;
    private javax.swing.JLabel cpuProcessStateLabel;
    private javax.swing.JLabel cycleLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField nombreProceso;
    private javax.swing.JButton randomProcessButton;
    // End of variables declaration//GEN-END:variables
}
